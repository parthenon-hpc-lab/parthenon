FROM nvidia/cuda:12.0.0-devel-ubuntu22.04

RUN apt-get clean && apt-get update -y && \
    DEBIAN_FRONTEND="noninteractive" TZ=America/New_York apt-get install -y --no-install-recommends git python3-minimal libpython3-stdlib bc hwloc wget openssh-client python3-numpy python3-h5py python3-matplotlib python3-scipy python3-pip lcov curl cuda-nsight-systems-12-6 cmake ninja-build libpython3-dev gcc-11 g++-11 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 10

RUN g++ --version

RUN pip3 install unyt

RUN pip3 install blosc2

RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key| apt-key add - && \
    echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main" > /etc/apt/sources.list.d/llvm.list

RUN apt-get clean && apt-get update -y && \
    DEBIAN_FRONTEND="noninteractive" TZ=America/New_York apt-get install -y --no-install-recommends clang-19 llvm-19 libomp-19-dev && \
    rm -rf /var/lib/apt/lists/*

RUN cd /tmp && \
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.4.tar.bz2 && \
    tar xjf openmpi-4.1.4.tar.bz2 && \
    cd openmpi-4.1.4 && \
    ./configure --prefix=/opt/openmpi --disable-mpi-fortran --disable-oshmem --with-cuda && \
    make -j16 && \
    make install && \
    cd / && \
    rm -rf /tmp/openmpi*

ENV LD_LIBRARY_PATH=/opt/openmpi/lib:$LD_LIBRARY_PATH \
    PATH=/opt/openmpi/bin:$PATH

RUN cd /tmp && \
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.2/src/hdf5-1.12.2.tar.gz && \
    tar xzf hdf5-1.12.2.tar.gz && \
    cd hdf5-1.12.2 && \
    mkdir -p /usr/local/hdf5/serial /usr/local/hdf5/parallel && \
    ./configure --prefix=/usr/local/hdf5/serial --enable-hl --enable-build-mode=production && make -j16 && make install && make clean && \
    ./configure --prefix=/usr/local/hdf5/parallel --enable-hl --enable-build-mode=production --enable-parallel && make -j16 && make install && \
    cd / && \
    rm -rf /tmp/hdf5-1.12.2*

RUN mkdir /tmp/build-adios2 && cd /tmp/build-adios2 && \
    git clone https://github.com/ornladios/ADIOS2.git ADIOS2 && \
    mkdir adios2-build && cd adios2-build && \
    cmake ../ADIOS2 -DADIOS2_USE_Blosc2=ON -DADIOS2_USE_Fortran=OFF && \
    make -j8 && make install && \
    cd / && \
    rm -rf /tmp/build-adios2

RUN mkdir /tmp/build-openpmd && cd /tmp/build-openpmd && \
    git clone https://github.com/openPMD/openPMD-api.git && \
    mkdir openPMD-api-build && cd openPMD-api-build && \
    cmake ../openPMD-api -DopenPMD_USE_PYTHON=ON -DPython_EXECUTABLE=$(which python3) -DopenPMD_USE_ADIOS2=ON && \
    cmake --build . && \
    cmake --build . --target install && \
    cd / && \
    rm -rf /tmp/build-openpmd

COPY ascent_build /tmp/ascent_build

## NOTE: with enable_cuda=ON, arm64 Dockerfile builds fail for some reason

RUN cd /tmp/ascent_build && \
    env enable_cuda=ON bash build_ascent.sh && \
    cd / && \
    rm -rf /tmp/ascent_build
